#Written by Felix Hsiao
#Last edit on 8/19/2013 by Felix Hsiao

import time

class prologix_34410a:
    def __init__(self, prologix, addr, mode='VOLT', ACDC='DC', maxRange='DEF', NPLC=None, samples=None, sampPer=None, autoZero=True, debug=False):
        self.prologix = prologix
        self.addr = addr
        self.mode = mode  #Mode can be VOLT, CURR, RES
        self.ACDC = ACDC
        self.maxRange = maxRange  #Recommended for range to be set manually
        self.NPLC = NPLC  #Can be 0.006, 0.02, 0.06, 0.2, 1, 2, 10, or 100; default 1
        self.samples = samples  #Max=50,000
        self.sampPer = sampPer  #Sample period; MAX=3,600 seconds;
                                #For NPLC=0.006, auto-range off, auto-zero off: sample rate ~ 10,000 samples per second
                                #Default is MIN~0.1 ms (NPLC/60)
        self.autoZero = autoZero
        self.debug = debug
        self.initialize()

    def initialize(self):
        if self.debug: print 'Initializing address %d for measuring %s %s ...' %(self.addr, self.ACDC, self.mode)
        self.prologix.set_address(self.addr)
        if self.debug: print 'Reset'
        self.prologix.write('*RST')
        if self.debug: print 'Clear'
        self.prologix.write('*CLS')
        if self.debug: print 'Configure'
        if self.mode=='RES':
            self.prologix.write('CONF:%s %s' %(self.mode, self.maxRange))
        else:
            self.prologix.write('CONF:%s:%s %s' %(self.mode, self.ACDC, self.maxRange))
            if not(self.autoZero): self.prologix.write('%s:ZERO:AUTO OFF' %(self.mode))
        if self.NPLC is not None:
            if self.debug: print 'Set NPLC'
            if self.ACDC=='DC':
                self.prologix.write('%s:NPLC %f' %(self.mode, self.NPLC))
            else:
                print('Cannot set NPLC for this configuration.')
        if self.samples is not None:
            if self.debug: print 'Setup sampling'
            self.prologix.write('SAMP:COUN %s' %(self.samples))
            if self.sampPer:
                self.prologix.write('SAMP:SOUR TIM')
                self.prologix.write('SAMP:TIM %s' %(str(self.sampPer)))
        if self.debug: print 'Setup triggering'
        self.prologix.write('TRIG:SOUR BUS')
        self.prologix.write('TRIG:DEL 0')
        if self.debug: print 'Address %d initialized.' %(self.addr)

    def waitForTrigger(self):
        if self.debug: print 'Preparing address %d for triggering ...' %(self.addr)
        self.prologix.set_address(self.addr)
        if self.debug: print 'INIT'
        self.prologix.write('INIT')
        if self.debug: print 'Address %d waiting for trigger.' %(self.addr)

    def readData(self, wait=1.1): #Experimental wait time ~ samples*NPLC/60+1
        time.sleep(wait)  #Wait until measurement finishes
        if self.debug: print 'Fetching data from address %d ...' %(self.addr)
        self.prologix.set_address(self.addr)
        if self.debug: print 'Fetch'
        self.prologix.write('FETC?')
        data = self.prologix.readline()
        if self.debug: print 'Recv:', data
        return data

    def countData(self):  #For testing purposes; note that each trigger overwrites previous measurements
        if self.debug: print 'Checking number of data points stored in address %d ...' %(self.addr)
        self.prologix.set_address(self.addr)
        if self.debug: print 'Points'
        self.prologix.write('DATA:POIN?')
        time.sleep(0.01)
        points = self.prologix.readline()
        if self.debug: print 'Recv:', points
        return points

    def clearData(self):  #For testing gpib; note that each trigger overwrites previous measurements; do not use with socket as it will time out
        if self.debug: print 'Clearing data stored in address %d ...' %(self.addr)
        self.prologix.set_address(self.addr)
        if self.debug: print 'R'
        self.prologix.write('R?')
        time.sleep(0.01)
        junk = self.prologix.readline()
        if self.debug: print junk
        while junk != '':  #Clear prologix memory
            junk = self.prologix.readline()
            if self.debug: print junk
        
        if self.debug: print 'Address %d data cleared.' %(self.addr)

    def checkError(self):
        if self.debug: print 'Checking if error was generated by address %d ...' %(self.addr)
        self.prologix.set_address(self.addr)
        if self.debug: print 'ERR?'
        self.prologix.write('SYST:ERR?')
        time.sleep(0.01)
        data = self.prologix.readline()
        if self.debug: print 'Recv:', data
        return data
